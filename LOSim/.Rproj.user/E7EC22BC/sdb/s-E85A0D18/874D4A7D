{
    "collab_server" : "",
    "contents" : "# SH 07-09-2016\n#\n# IBM calibration\n#\n#-#-#-#-#-#-#-#-#-#-#\n\n##########\n# Setup  #\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#set seed\nset.seed(01022016)\n\n# load packages\nlibrary(sp)\nlibrary(raster)\nlibrary(ranger)\nlibrary(LOSim)\nlibrary(abctools)\nlibrary(BayesianTools) \nlibrary(lubridate)\n\n\n# source functions\nsource(\"../code/CalibDataPrep.r\")\nsource(\"../code/sumStats.r\")\nsource(\"../code/getSumStats.r\")\nsource(\"../code/createPriors.r\")\nsource(\"../code/runABC.r\")\nsource(\"../code/ABCsummaryChoice.r\")\nsource(\"../code/plotSummariesCorrelation.r\")\nsource(\"../code/ABCgetEstimate.r\")\nsource(\"../code/mergeLOSim.r\")\n\n##############################\n# load/prepare model input   #\n#--------##--------##--------##--------##--------##--------##--------##--------#\n# load telemetry data\ncleaned <- read.csv(\"../data/natal_dispersal_cleaned.csv\",\n                    stringsAsFactors = FALSE)\n# date as POSIXct\ncleaned$date <- as.POSIXct(cleaned$date)\ncleaned$date <- lubridate::with_tz(cleaned$date, \"GMT\")\n# load IDs of training and validation set\nload(\"../data/trainTestIDs.RData\")\n\n\n#----------------------------------------------------#\n\n# classify dispersal locations # date of first outing (400m buffer)\nfirstOut <- 1:3\nfor(i in seq_along(unique(cleaned$id))){\n  idIndex <- which(cleaned$id == unique(cleaned$id)[i])\n  birthIndex <- idIndex[which.min(cleaned$date[cleaned$id == \n                                                 unique(cleaned$id)[i]])]\n  distToBL <- sapply(idIndex, function(x) \n    sqrt((cleaned$posX[x] - cleaned$posX[birthIndex])^2\n         + (cleaned$posY[x] - cleaned$posY[birthIndex])^2))\n  \n  search = TRUE\n  j = 1\n  while(search){\n    if(distToBL[j] > 400){\n      search = FALSE\n      firstOut[i] = idIndex[j]\n    }\n    j = j + 1\n  }\n} \n\nfirstOut <- cleaned[firstOut,]\n\n\n# select locations within dispersal period, i.e. \ndispersal <- cleaned[-c(1:NROW(cleaned)),]\nfor(x in unique(cleaned$id)){\n  subs <-  cleaned[cleaned$id == x \n                   & cleaned$date >= firstOut$date[firstOut$id == x] \n                   & cleaned$date <= (firstOut$date[firstOut$id == x] + 3600*24*60),]\n  dispersal <- rbind(dispersal, subs)\n}\nrm(search, x, j, i, idIndex, distToBL, birthIndex, subs)\n\n# # spatialpointsdataframe\ndispSpdf <- SpatialPointsDataFrame(coords = dispersal[,c(\"posX\",\"posY\")], \n                                   data = dispersal) \n# add correct projection: DHDN / Gauss-Kruger zone 3\nproj4string(dispSpdf) <- CRS(\"+init=epsg:31467\")\n\n#----------------------------------------------------#\n# get start points from dispersal data, i.e. first recorded locations in dispersal period\nstartIndex <- 1:3\nfor(i in seq_along(unique(dispSpdf$id))){\n  idIndex <- which(dispSpdf$id == unique(dispSpdf$id)[i])\n  startIndex[i] <- idIndex[which(dispSpdf$date[idIndex] == min(dispSpdf$date[idIndex]))]\n} \nstartPoints <- dispSpdf[startIndex, ]\n\n# telemetry data extent + 50 km buffer\ncalibrationExtent <- extent(startPoints) + rep(c(-40000,40000), 2)\n\n#----------------------------------------------------#\n# load habitat suitability\nhabitatSuitability <- raster(\"../envVars/envOnStudyExtent/habitatSuitabilityScaled.tif\")\n# habitatSuitability <- raster(\"../envVars/JF/S123_bins.tif\")\n# proj4string(habitatSuitability) <- CRS(\"+init=epsg:31467\")\n# crop habitat suitability map\nhabSuitCalib <- crop(habitatSuitability, calibrationExtent)\nhabSuitCalib[is.na(values(habSuitCalib))] <- 0 # set NAs to zero <- reflection\nHSvals <- as.matrix(habSuitCalib)\n\n#----------------------------------------------------#\n# priors for observation error\nAccuracy <- sapply(unique(dispSpdf$id), function(x) dispersal$accuracy[dispersal$id == x])\naccLookUp <- c(0,5,20,50,100,200)\nAccMetric <- sapply(unique(dispSpdf$id), function(x) accLookUp[Accuracy[[x]]+1])\nAccMetric <- unlist(AccMetric)\n\n#----------------------------------------------------#\n# prepare telemetry data\nrscRange = 200\ncalibrationData <- calibTransform(x = dispersal$posX, y = dispersal$posY,\n                                  date = dispersal$date, id = dispersal$id,\n                                  habitatSuitability = habSuitCalib, rscExtent = rscRange)\n\n# filter individuals with more than 50 recorded locations\nnRelocs <- sapply(seq_along(calibrationData), function(x) NROW(calibrationData[[x]]$data))\ncalibID <- names(calibrationData)[nRelocs  > 50 & names(calibrationData) %in% trainingID]\nvalidID <- names(calibrationData)[nRelocs  > 50 & names(calibrationData) %in% testID]\n\n#save(calibID,validID, file = \"../data/trainTestIDs_g50rl.RData\")\n\n####################\n# parameter sample #\n#--------##--------##--------##--------##--------##--------##--------##--------#\n# number of simulations per individual\nn = 500000\n\n# parameter names\npnames <- c(\"habitatPreference\", \n            \"stepShape\", \n            \"stepScale\", \n            \"directionalBias\", \n            \"dispRestMean\", \n            \"dispRestSd\", \n            \"maximumEffort\", \n            \"roostLambda\",\n            \"observationError\",\n            \"rscRange\")\n\n# prior distributions\ndistr <- list(runif, runif, NULL, runif, NULL, NULL, NULL, runif, rnorm, NULL)\n\n# prior ranges\nranges <- list(c(0.1, 5), \n               c(0.1, 4), \n               2, \n               c(0.1, 3.5), \n               1.5,  \n               0.7, \n               6000,\n               c(.01,30),\n               c(mean(AccMetric),sd(AccMetric)),\n               rscRange\n)\n\n# which parameter are fixed\nfixed = c(3,5,6,7,10)\n\n# create parameters\nPs <- createPriors(pnames, distr, ranges, n, redraw = 9, fixed)\n\n# careful: throw away first x in y. run, throw away first 30 000 (r.seed issue)\n# Ps <- Ps[500001:1000000,]\n####################\n# model setup      #\n#--------##--------##--------##--------##--------##--------##--------##--------#\n\n# environment input\nHS <- list(values = HSvals, upperleft = extent(habSuitCalib)[c(1,4)], resolution = raster::res(habSuitCalib)[1])\n\nsimulation <- runABC(Ps, HS, calibrationData[calibID], parallel = TRUE, \n                      maxIterations = 40000, randomSeed = NULL, \n                      sumStatsSampleSize = 5000, sumStats, getSumStats)\n\n\n# save(simulation, file = \"../data/simulation.RData\")\n# load(\"../data/simulation.RData\")\n# load(\"../data/simulation01.RData\")\n# load(\"../data/simulation02.RData\")\n\n\n# merge simulations\n# simulation <- mergeLOSim(simulation01, simulation02)\n# save(simulation, file = \"../data/simulation.RData\")\n# load(\"../data/simulation.RData\")\n\n# selected summary estimation\nsummaries <- abcCreateSummaries(simulation, method = \"rF\", summarySelection = NULL, \n                                  targetParameters = c(1,2,4,8), getSumStats = getSumStats, \n                                  sumStats = sumStats, sumStatsSampleSize = 5000, parallel = TRUE,\n                                  predictionPredictor = TRUE)\n# save(summaries, file = \"../data/summaries.RData\")\n# load(\"../data/summaries.RData\")\n\n\n# rejection\nposterior <- getEstimate(summaries, proportionFiltered = 1/500, parallel = FALSE, regr.adj = TRUE, comp.MAP = FALSE)\n# save(posterior, file = \"../data/posterior.RData\")\n# load(\"../data/posterior.RData\")\n\n\n# plot posterior distributions\naddInfo <- read.csv(\"../data/Additional_data_juveniles.csv\")\n\n# load calibration IDs\nload(\"../data/trainTestIDs_g50rl.RData\")\n# use only calibID information\naddInfo <- addInfo[addInfo$Name1 %in% calibID,]\n\n# pool by Sex\n\n# habitat preference\nfHP <- unlist(lapply(which(addInfo$Sex == \"f\"), function(x) posterior$parameters[[x]][,1])); mean(fHP)\nmHP <- unlist(lapply(which(addInfo$Sex == \"m\"), function(x) posterior$parameters[[x]][,1])); mean(mHP)\n# t.test(fHP,mHP)\n\n# step shape\nfSS <- unlist(lapply(which(addInfo$Sex == \"f\"), function(x) posterior$parameters[[x]][,2])); mean(fSS)\nmSS <- unlist(lapply(which(addInfo$Sex == \"m\"), function(x) posterior$parameters[[x]][,2])); mean(mSS)\n# t.test(fSS,mSS)\n\n# directional bias\nfDB <- unlist(lapply(which(addInfo$Sex == \"f\"), function(x) posterior$parameters[[x]][,3])); mean(fDB)\nmDB <- unlist(lapply(which(addInfo$Sex == \"m\"), function(x) posterior$parameters[[x]][,3])); mean(mDB)\n# t.test(fDB,mDB)\n\n# maximum effort\nfME <- unlist(lapply(which(addInfo$Sex == \"f\"), function(x) posterior$parameters[[x]][,4])); mean(fME)\nmME <- unlist(lapply(which(addInfo$Sex == \"m\"), function(x) posterior$parameters[[x]][,4])); mean(mME)\n# t.test(fME,mME)\n\n# plot posterior distributions\nx11()\npar(mfrow=c(2,2), mar=c(1.5,.5,.5,0), oma=c(0,0,0,1), cex.lab = 1.5, cex.axis = 1.3, las = 1, mgp = c(1.5,0.4,0), tcl = -0.2, pty = \"s\")\nplot(density(posterior$parameters[[1]][,1]), xlim=c(0.1,5), \n     main = \"\", xlab = \"\", ylab = \"\", \n     ylim =c(0,1.2), type = \"n\", yaxt = \"n\",lwd=0.5)\nfor(i in 1:length(posterior$parameters)) \n  lines(density(posterior$parameters[[i]][,1]), col = ifelse(is.na(addInfo$Sex[i]),\n                                                                rgb(0.7,0.7,0.7),\n                                                                ifelse(addInfo$Sex[i] == \"f\",\n                                                                       rgb(0.55,0,0,0.4),\n                                                                       rgb(0,0,0.55,0.4))),\n        lwd=0.5)\n# pooled\nlines(density(fHP), col = rgb(0.55,0,0), lwd=2) \nlines(density(mHP), col = rgb(0,0,0.55), lwd=2)\n\nplot(density(posterior$parameters[[1]][,2]), xlim=c(0.1,4), \n     main = \"\", xlab = \"\", ylab = \"\", \n     ylim =c(0,1.6), type = \"n\", yaxt = \"n\",lwd=0.5)\nfor(i in 1:length(posterior$parameters)) \n  lines(density(posterior$parameters[[i]][,2]), col = ifelse(is.na(addInfo$Sex[i]),\n                                                                rgb(0,0,0,0.4),\n                                                                ifelse(addInfo$Sex[i] == \"f\",\n                                                                       rgb(0.55,0,0,0.4),\n                                                                       rgb(0,0,0.55,0.4))),\n        lwd=0.5)\n# pooled\nlines(density(fSS), col = rgb(0.55,0,0), lwd=2) \nlines(density(mSS), col = rgb(0,0,0.55), lwd=2)\n\nplot(density(posterior$parameters[[1]][,3]), xlim=c(0.1,3.5), \n     main = \"\", xlab = \"\", ylab = \"\",\n     ylim =c(0,3.5), type = \"n\", yaxt = \"n\",lwd=0.5)\nfor(i in 1:length(posterior$parameters)) \n  lines(density(posterior$parameters[[i]][,3]), col = ifelse(is.na(addInfo$Sex[i]),\n                                                                rgb(0,0,0,0.4),\n                                                                ifelse(addInfo$Sex[i] == \"f\",\n                                                                       rgb(0.55,0,0,0.4),\n                                                                       rgb(0,0,0.55,0.4))),\n        lwd=0.5)\n# pooled\nlines(density(fDB), col = rgb(0.55,0,0), lwd=2) \nlines(density(mDB), col = rgb(0,0,0.55), lwd=2)\n\nplot(density(posterior$parameters[[1]][,4]), xlim=c(0.01,30), \n     main = \"\", xlab = \"\", ylab = \"\",\n     ylim =c(0,0.3), type = \"n\", yaxt = \"n\",lwd=0.5)\nfor(i in 1:length(posterior$parameters)) \n  lines(density(posterior$parameters[[i]][,4]), col = ifelse(is.na(addInfo$Sex[i]),\n                                                                rgb(0,0,0,0.4),\n                                                                ifelse(addInfo$Sex[i] == \"f\",\n                                                                       rgb(0.55,0,0,0.4),\n                                                                       rgb(0,0,0.55,0.4))),\n        lwd=0.5)\n# pooled\nlines(density(fME), col = rgb(0.55,0,0), lwd=2) \nlines(density(mME), col = rgb(0,0,0.55), lwd=2)\n\n\n# x11(10,10)\n# par(mfrow=c(2,2), pty = \"s\")\n# plot(density(posterior$parameters[[1]][,1]), xlim=c(0.1,5), \n#      main = \"habitat preference\", xlab = \"par value\", \n#      ylim =c(0,3), col = rgb(0,0,0,0.2))\n# for(i in 2:length(posterior$parameters)) \n#   lines(density(posterior$parameters[[i]][,1]), col = rgb(0,0,0,0.2))\n# plot(density(posterior$parameters[[1]][,2]), xlim=c(0.1,4), \n#      main = \"step shape\", xlab = \"par value\", \n#      ylim =c(0,3), col = rgb(0,0,0,0.2))\n# for(i in 2:length(posterior$parameters)) \n#   lines(density(posterior$parameters[[i]][,2]), col = rgb(0,0,0,0.2))\n# plot(density(posterior$parameters[[1]][,3]), xlim=c(0.1,2), \n#      main = \"directional bias\", xlab = \"par value\", \n#      ylim =c(0,3), col = rgb(0,0,0,0.2))\n# for(i in 2:length(posterior$parameters)) \n#   lines(density(posterior$parameters[[i]][,3]), col = rgb(0,0,0,0.2))\n# plot(density(posterior$parameters[[1]][,4]), xlim=c(2000,12000), \n#      main = \"maximum effort\", xlab = \"par value\", \n#      ylim =c(0,0.001), col = rgb(0,0,0,0.2))\n# for(i in 2:length(posterior$parameters)) \n#   lines(density(posterior$parameters[[i]][,4]), col = rgb(0,0,0,0.2))\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\nx11(10,10)\ncorrelationPlot(posterior$parameters[[1]], density = \"smooth\")\npng(\"../figures/results/summaries_rf_corPlot.png\", width = 500, height = 500, units = \"px\")\nplotSC(summaries, plot.which = 1)\ndev.off()\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n# estimate summary statistics using partial least squre regression\n\n# load(\"../data/simulation.RData\")\n# \n# # selected summary estimation\n# plsr_ssEstimates <- abcCreateSummaries(simulation, method = \"saABC\", summarySelection = NULL, \n#                                        targetParameters = c(1,2,4,8), getSumStats = getSumStats, \n#                                        sumStats = sumStats, sumStatsSampleSize = 5000, nCPU = NULL,\n#                                        predictionPredictor = FALSE)\n\n# save(plsr_ssEstimates, file = \"../data/plsrEstimates.RData\")\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#",
    "created" : 1503479434868.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4253346013",
    "id" : "874D4A7D",
    "lastKnownWriteTime" : 1504258469,
    "last_content_update" : 1504258469212,
    "path" : "~/Documents/Uni/projects/littleowl/code/calibrationScript.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}