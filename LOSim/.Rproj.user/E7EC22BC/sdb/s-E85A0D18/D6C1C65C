{
    "collab_server" : "",
    "contents" : "# SH 05-10-2016\n#\n# forward simulation script\n#\n#-#-#-#-#-#-#-#-#-#-#\n\n##########\n# Setup  #\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#set seed\nset.seed(06102016)\n\n# load packages\nlibrary(sp)\nlibrary(rgdal)\nlibrary(rgeos)\nlibrary(raster)\nlibrary(LOSim)\nlibrary(spatstat)\n\n\n# source functions\nsource(\"../code/forwardSimulation.r\")\nsource(\"../code/plotLOSim.r\")\n\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\n\n# load posterior\nload(\"../data/posterior.RData\")\n\n# load habitat suitability\nhabitatSuitability <- raster(\"../envVars/envOnStudyExtent/habitatSuitabilityScaled.tif\")\nhabitatSuitability[is.na(values(habitatSuitability))] <- 0 # set NAs to zero <- reflection\n\nHSvals <- as.matrix(habitatSuitability)\n\nHS <- list(values = HSvals, upperleft = extent(habitatSuitability)[c(1,4)], resolution = raster::res(habitatSuitability)[1])\n\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\n\n# load ring data to provide start locations\nringRaw <- read.csv(\"../data/Steinkauz_Beringungsdaten_ab_2005.csv\")\nringData <- data.frame(id = as.factor(ringRaw$STRRINGNR),\n                       date = as.POSIXct(strptime(ringRaw$DTMDATE, \"%d/%m/%Y %H:%M\", \n                                                  tz = \"Europe/Berlin\")),\n                       longitude = ringRaw$LNGLONG,\n                       latitude = ringRaw$LNGLAT,\n                       geoReg = ringRaw$STRTEXT.2) \n\n# as spatial data frame\nringSDF <- SpatialPointsDataFrame(coords = ringData[,c(\"longitude\",\"latitude\")], \n                                  data = ringData) \n\n# add correct projection: wgs84\nproj4string(ringSDF) <- \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\"\n\n## Load administrative boundary BW (http://www.gadm.org)\nbw <- readOGR(\"../envVars/administrativeBoundary\", layer = \"DEU_adm1\",\n              encoding = \"ESRI Shapefile\", verbose = FALSE)\nbw <- bw[bw$NAME_1 == \"Baden-WÃ¼rttemberg\",]\n\n## crop ringing data to bw\nringSDF <- crop(ringSDF, extent(bw))\nringBW <- gIntersects(ringSDF, bw, byid = TRUE)\nringBW <- ringSDF[c(ringBW),]\n\n\n# reproject to GK3\nringBW <- spTransform(ringBW, proj4string(habitatSuitability))\n\n# select locations from 2012 to 2015\nstartLocs <- coordinates(ringBW)[format(ringBW$date, format=\"%Y\") %in% 2012:2015,]\n\n# resample locations\ntargetSize <- 10000\nstartLocs <- startLocs[sample(NROW(startLocs), size = targetSize, replace = TRUE),]\n\n# # split into 3 populations (N = Neckarbecken, K = Kaiserstuhl, L = Loerrach)\n# SL_N <- startLocs[startLocs[,1] > 3425000,]\n# startLocs <-startLocs[-which(startLocs[,1] > 3425000),]\n# SL_K <- startLocs[startLocs[,2] > 5300000,]\n# startLocs <- startLocs[-which(startLocs[,2] > 5300000),]\n# SL_L <- startLocs\n\nrm(ringData, ringRaw, bw, ringBW, ringSDF, HSvals, habitatSuitability, targetSize)\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\n# add option to define simulation period in LOSim::runSimulation\n\n# make simulations\nsim10 <- LOSim(posteriorObj = posterior,\n               habitatSuitability = HS,\n               individuals = NULL,\n               startLocations = startLocs,\n               fixParameters = c(2,1.5,0.7,6000),\n               maxPeriod = 60,\n               maxIterations = 40000,\n               generations = 10,\n               randomSeed = NULL,\n               reflection = 30,\n               reflectionValues = 0,\n               parallel = TRUE,\n               clusterType = \"SOCK\")\n\n\n# save(sim50, file = \"../data/forwardSimulation50.RData\")\n# load(\"../data/forwardSimulation50.RData\")\n# plot results\nx11(8,10)\nplot(habitatSuitability, xlab = \"\", ylab = \"\")\nplotLOSim(sim50, plotHS = \"onTop\", col = rgb(0,0,0,0.1))\n\n\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n#--------##--------##--------##--------##--------##--------##--------##--------#\n\n# plotting\n\n# reduce simulations to one data.frame\nsimulations <- vector(\"list\", length(sim50$simulations))\nfor(g in seq_along(sim50$simulations)){\n  simulations[[g]] <- do.call(rbind, sim50$simulations[[g]])\n}\nsimulations <- do.call(rbind, simulations)\nsimulations <- as.data.frame(simulations[,c(\"x\",\"y\")])\nsimulations$value <- 1\n\n# produce point shapefile\nsimSpP <- SpatialPointsDataFrame(coords = simulations, data = simulations,\n                                 proj4string = CRS(proj4string(habitatSuitability)))\n\nwriteOGR(simSpP, dsn = \"../data\", layer=\"forwardSimulation50sp\", driver=\"ESRI Shapefile\")\n\n#--------##--------##--------##--------##--------##--------##--------##--------#\n\n# 5 year step-wise boundary shapes plot\nlibrary(maptools)\n\n# interval\ninterval <- 5\n# buffer radius\nradius <- 200\n# output\nboundaries <- vector(\"list\", floor(length(sim50$simulations)/interval))\n\n# reduce to generations\nsimulations <- vector(\"list\", length(sim50$simulations))\nfor(g in seq_along(sim50$simulations)){\n  simulations[[g]] <- do.call(rbind, sim50$simulations[[g]])\n}\n\n# split into interval\nindex = 1 # initiate loop counter\nfor(g in seq(interval, length(sim50$simulations), interval)){\n  # chop up simulations\n  chopped <- as.data.frame(do.call(rbind, simulations[(g-interval+1):g])[,c(\"x\",\"y\")])\n  chopped$generation <- g\n  \n  \n  # to point shapefile\n  spdf <- SpatialPointsDataFrame(coords = chopped[,c(\"x\",\"y\")], data = chopped,\n                                 proj4string = CRS(proj4string(habitatSuitability)))\n  \n  # write to shapefile\n  writeOGR(spdf, dsn = \"../data/generationIntervals\", layer=paste0(\"loc_gen\",g), driver=\"ESRI Shapefile\")\n  \n  #test <- gBuffer(spdf, width=radius, quadsegs=1, capStyle=\"Round\", id=g)\n  \n  # loop counter\n  index = index + 1\n}\n\n\n# # ppp\n# library(graphics)\n# smoothScatter(simulations[,\"x\"], simulations[,\"y\"], nbin = 256, nrpoints = 100, \n#               colramp = colorRampPalette(c(rgb(1,1,1,0), blues9)), add = T)\n",
    "created" : 1503413273199.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "876274743",
    "id" : "D6C1C65C",
    "lastKnownWriteTime" : 1503741132,
    "last_content_update" : 1503741132651,
    "path" : "~/Documents/Uni/projects/littleowl/code/forwardSimulation_script.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}