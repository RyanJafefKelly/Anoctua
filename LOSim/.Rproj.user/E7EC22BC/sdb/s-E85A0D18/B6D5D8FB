{
    "collab_server" : "",
    "contents" : "# run ABC\n\nrunABC <- function(parameters, \n                   habitatSuitability, \n                   observations, \n                   parallel = FALSE, \n                   maxIterations, \n                   randomSeed = NULL,\n                   sumStatsSampleSize,\n                   sumStats,\n                   getSumStats,\n                   clusterType = \"SOCK\" # or \"MPI\"\n                   ){\n  # start timing \n  ptm <- proc.time()\n\n  # number of parameter combinations\n  nParameters = NROW(parameters)\n  \n  if(!parallel){\n    library(LOSim); library(moments)\n    ssSim <- vector(\"list\", length(observations))\n    # progress bar\n    pb <- txtProgressBar(min = 0, max = length(observations), style = 3)\n    for(i in seq_along(observations)){\n\n      # prepare parameters\n      parMat <- cbind(rep(observations[[i]]$data[1 , \"xObserved\"], nParameters),\n                      rep(observations[[i]]$data[1 , \"yObserved\"], nParameters),\n                      parameters\n      )\n      \n      # run simulation\n      simData <- LOSim::runSimulation(habitatSuitability$values, \n                                      maxIterations, \n                                      parMat, \n                                      randomSeed,\n                                      \"observed\", \n                                      observations[[i]]$data[, \"timestamp\"], \n                                      NULL,\n                                      habitatSuitability$upperleft,\n                                      habitatSuitability$resolution,\n                                      observations[[i]]$startTime,\n                                      observations[[i]]$startDoy,\n                                      observations[[i]]$centroid[1],\n                                      observations[[i]]$centroid[2]\n                                      )\n      \n      \n      # compute summary statistics\n      ssSim[[i]] <- getSumStats(simData[[1]], sumStatsSampleSize, simData[[2]], simData[[3]], sumStats)\n      \n      # progress bar\n      setTxtProgressBar(pb, i)\n    }\n    # close progress bar\n    close(pb)\n  }else{\n    library(doSNOW)\n    # parallel execution\n    if(clusterType == \"MPI\"){\n      library(doMPI)\n      cl <- doMPI::startMPIcluster()\n      doMPI::registerDoMPI(cl)\n    }else{\n      if(parallel == T | parallel == \"auto\"){\n        cores <- parallel::detectCores() - 1\n        message(\"parallel, set cores automatically to \", cores)\n      }else if (is.numeric(parallel)){\n        cores <- parallel\n        message(\"parallel, set number of cores manually to \", cores)\n      }else stop(\"wrong argument to parallel\")\n      \n      cl <- parallel::makeCluster(cores, type = clusterType)\n      doSNOW::registerDoSNOW(cl)\n      \n    }  \n    \n    # set up progress bar\n    pb <- txtProgressBar(min = 1, max = length(observations), style = 3)\n    progress <- function(n) setTxtProgressBar(pb, n)\n    opts <- list(progress = progress)\n    \n    ssSim <- foreach::foreach(i = seq_along(observations), \n                              .packages=c(\"LOSim\", \"moments\"), .options.snow=opts) %dopar% {\n\n                                # prepare parameters\n                                parMat <- cbind(rep(observations[[i]]$data[1 , \"xObserved\"], nParameters),\n                                                rep(observations[[i]]$data[1 , \"yObserved\"], nParameters),\n                                                parameters\n                                )\n                                \n                                # run simulation\n                                simData <- LOSim::runSimulation(habitatSuitability$values, \n                                                                maxIterations, \n                                                                parMat, \n                                                                randomSeed,\n                                                                \"observed\", \n                                                                observations[[i]]$data[, \"timestamp\"], \n                                                                NULL,\n                                                                habitatSuitability$upperleft,\n                                                                habitatSuitability$resolution,\n                                                                observations[[i]]$startTime,\n                                                                observations[[i]]$startDoy,\n                                                                observations[[i]]$centroid[2],\n                                                                observations[[i]]$centroid[1])\n                                \n                                \n                                \n                                # compute summary statistics\n                                getSumStats(simData[[1]], sumStatsSampleSize, simData[[2]], simData[[3]], sumStats)\n                              }\n    # free memory from workers\n    close(pb)\n    if(clusterType == \"MPI\"){\n      doMPI::closeCluster(cl)\n      Rmpi::mpi.finalize()\n    } else{\n      parallel::stopCluster(cl)\n    }\n  } # end parallel\n  \n  # note settings\n  settings <- vector(\"list\", 0L)\n  settings$parallel <- parallel\n  settings$maxIterations <- maxIterations\n  settings$randomSeed <- randomSeed\n  settings$sumStatSampleSize <- sumStatsSampleSize\n  \n  # results\n  output <- list(parameters = parameters, \n                 summaries = lapply(seq_along(ssSim), function(x) ssSim[[x]]$summaryStatistics),\n                 validity = lapply(seq_along(ssSim), function(x) ssSim[[x]]$validity),\n                 #nSimSteps = lapply(seq_along(ssSim), function(x) ssSim[[x]]$nSimSteps),\n                 observations = observations,\n                 #environment = habitatSuitability,\n                 settings = settings\n  )\n  \n  \n  # stop timing\n  print(proc.time() - ptm)\n  \n  return(output) \n  \n}",
    "created" : 1503414919001.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1711581740",
    "id" : "B6D5D8FB",
    "lastKnownWriteTime" : 1501834281,
    "last_content_update" : 1501834281,
    "path" : "~/Documents/Uni/projects/littleowl/code/runABC.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}